// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package yah_app_registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShieldProxyClient is the client API for ShieldProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShieldProxyClient interface {
	ShieldCallService(ctx context.Context, in *ShieldRequest, opts ...grpc.CallOption) (*ShieldReply, error)
}

type shieldProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewShieldProxyClient(cc grpc.ClientConnInterface) ShieldProxyClient {
	return &shieldProxyClient{cc}
}

func (c *shieldProxyClient) ShieldCallService(ctx context.Context, in *ShieldRequest, opts ...grpc.CallOption) (*ShieldReply, error) {
	out := new(ShieldReply)
	err := c.cc.Invoke(ctx, "/shield_proxy.ShieldProxy/ShieldCallService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShieldProxyServer is the server API for ShieldProxy service.
// All implementations must embed UnimplementedShieldProxyServer
// for forward compatibility
type ShieldProxyServer interface {
	ShieldCallService(context.Context, *ShieldRequest) (*ShieldReply, error)
	mustEmbedUnimplementedShieldProxyServer()
}

// UnimplementedShieldProxyServer must be embedded to have forward compatible implementations.
type UnimplementedShieldProxyServer struct {
}

func (UnimplementedShieldProxyServer) ShieldCallService(context.Context, *ShieldRequest) (*ShieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShieldCallService not implemented")
}
func (UnimplementedShieldProxyServer) mustEmbedUnimplementedShieldProxyServer() {}

// UnsafeShieldProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShieldProxyServer will
// result in compilation errors.
type UnsafeShieldProxyServer interface {
	mustEmbedUnimplementedShieldProxyServer()
}

func RegisterShieldProxyServer(s grpc.ServiceRegistrar, srv ShieldProxyServer) {
	s.RegisterService(&ShieldProxy_ServiceDesc, srv)
}

func _ShieldProxy_ShieldCallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldProxyServer).ShieldCallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shield_proxy.ShieldProxy/ShieldCallService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldProxyServer).ShieldCallService(ctx, req.(*ShieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShieldProxy_ServiceDesc is the grpc.ServiceDesc for ShieldProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShieldProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shield_proxy.ShieldProxy",
	HandlerType: (*ShieldProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShieldCallService",
			Handler:    _ShieldProxy_ShieldCallService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy/shield_proxy.proto",
}
